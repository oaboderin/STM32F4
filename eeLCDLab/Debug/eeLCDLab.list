
eeLCDLab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009c4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000b6c  08000b6c  00010b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b84  08000b84  00010b8c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b84  08000b84  00010b8c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b84  08000b8c  00010b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b84  08000b84  00010b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b88  08000b88  00010b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010b8c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010b8c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ba5  00000000  00000000  00010bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000293  00000000  00000000  00011761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  000119f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000c0  00000000  00000000  00011ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020d1  00000000  00000000  00011ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000114d  00000000  00000000  00013c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008800  00000000  00000000  00014dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001d5be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000304  00000000  00000000  0001d610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000b54 	.word	0x08000b54

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000b54 	.word	0x08000b54

080001e8 <delay>:
#include <stdint.h>
#include<string.h>
#include "stm32fxx.h"

void delay(uint16_t mult) {
 80001e8:	b480      	push	{r7}
 80001ea:	b085      	sub	sp, #20
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	80fb      	strh	r3, [r7, #6]
	for (uint32_t i = 0; i < (mult * 16000); i++)
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
 80001f6:	e002      	b.n	80001fe <delay+0x16>
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	88fb      	ldrh	r3, [r7, #6]
 8000200:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000204:	fb02 f303 	mul.w	r3, r2, r3
 8000208:	461a      	mov	r2, r3
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	4293      	cmp	r3, r2
 800020e:	d3f3      	bcc.n	80001f8 <delay+0x10>
		;
}
 8000210:	bf00      	nop
 8000212:	bf00      	nop
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <delayMs>:

void delayMs(uint32_t n) {
 800021e:	b480      	push	{r7}
 8000220:	b085      	sub	sp, #20
 8000222:	af00      	add	r7, sp, #0
 8000224:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (; n > 0; n--)
 8000226:	e00d      	b.n	8000244 <delayMs+0x26>
		for (i = 0; i < 3195; i++)
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
 800022c:	e002      	b.n	8000234 <delayMs+0x16>
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	3301      	adds	r3, #1
 8000232:	60fb      	str	r3, [r7, #12]
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	f640 427a 	movw	r2, #3194	; 0xc7a
 800023a:	4293      	cmp	r3, r2
 800023c:	d9f7      	bls.n	800022e <delayMs+0x10>
	for (; n > 0; n--)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	3b01      	subs	r3, #1
 8000242:	607b      	str	r3, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d1ee      	bne.n	8000228 <delayMs+0xa>
			;
}
 800024a:	bf00      	nop
 800024c:	bf00      	nop
 800024e:	3714      	adds	r7, #20
 8000250:	46bd      	mov	sp, r7
 8000252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000256:	4770      	bx	lr

08000258 <LCD_GPIO_Init>:

void LCD_GPIO_Init(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioDpins, GpioCpins;

	GPIO_PClkCtrl(GPIOD, ENABLE);
 800025e:	2101      	movs	r1, #1
 8000260:	4836      	ldr	r0, [pc, #216]	; (800033c <LCD_GPIO_Init+0xe4>)
 8000262:	f000 f963 	bl	800052c <GPIO_PClkCtrl>
	GPIO_PClkCtrl(GPIOC, ENABLE);
 8000266:	2101      	movs	r1, #1
 8000268:	4835      	ldr	r0, [pc, #212]	; (8000340 <LCD_GPIO_Init+0xe8>)
 800026a:	f000 f95f 	bl	800052c <GPIO_PClkCtrl>

	GpioDpins.pGPIOx = GPIOD; //PD0 to PD7 for the data lines
 800026e:	4b33      	ldr	r3, [pc, #204]	; (800033c <LCD_GPIO_Init+0xe4>)
 8000270:	60fb      	str	r3, [r7, #12]
	GpioDpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000272:	2301      	movs	r3, #1
 8000274:	747b      	strb	r3, [r7, #17]
	GpioDpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 8000276:	2303      	movs	r3, #3
 8000278:	74bb      	strb	r3, [r7, #18]
	GpioDpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800027a:	2300      	movs	r3, #0
 800027c:	753b      	strb	r3, [r7, #20]
	GpioDpins.GPIO_PinConfig.PinPuPdControl = GPIO_NO_PUPD;
 800027e:	2300      	movs	r3, #0
 8000280:	74fb      	strb	r3, [r7, #19]

	GpioCpins.pGPIOx = GPIOC; // PC0 to PC2 for control lines
 8000282:	4b2f      	ldr	r3, [pc, #188]	; (8000340 <LCD_GPIO_Init+0xe8>)
 8000284:	603b      	str	r3, [r7, #0]
	GpioCpins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000286:	2301      	movs	r3, #1
 8000288:	717b      	strb	r3, [r7, #5]
	GpioCpins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_VERYHIGH;
 800028a:	2303      	movs	r3, #3
 800028c:	71bb      	strb	r3, [r7, #6]
	GpioCpins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800028e:	2300      	movs	r3, #0
 8000290:	723b      	strb	r3, [r7, #8]
	GpioCpins.GPIO_PinConfig.PinPuPdControl = GPIO_NO_PUPD;
 8000292:	2300      	movs	r3, #0
 8000294:	71fb      	strb	r3, [r7, #7]

	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000296:	2300      	movs	r3, #0
 8000298:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 800029a:	f107 030c 	add.w	r3, r7, #12
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fa5c 	bl	800075c <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 80002a4:	2301      	movs	r3, #1
 80002a6:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 80002a8:	f107 030c 	add.w	r3, r7, #12
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fa55 	bl	800075c <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 80002b2:	2302      	movs	r3, #2
 80002b4:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 80002b6:	f107 030c 	add.w	r3, r7, #12
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fa4e 	bl	800075c <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 80002c0:	2303      	movs	r3, #3
 80002c2:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 80002c4:	f107 030c 	add.w	r3, r7, #12
 80002c8:	4618      	mov	r0, r3
 80002ca:	f000 fa47 	bl	800075c <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 80002ce:	2304      	movs	r3, #4
 80002d0:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 80002d2:	f107 030c 	add.w	r3, r7, #12
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fa40 	bl	800075c <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80002dc:	2305      	movs	r3, #5
 80002de:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 80002e0:	f107 030c 	add.w	r3, r7, #12
 80002e4:	4618      	mov	r0, r3
 80002e6:	f000 fa39 	bl	800075c <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80002ea:	2306      	movs	r3, #6
 80002ec:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 80002ee:	f107 030c 	add.w	r3, r7, #12
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fa32 	bl	800075c <GPIO_init>
	GpioDpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80002f8:	2307      	movs	r3, #7
 80002fa:	743b      	strb	r3, [r7, #16]
	GPIO_init(&GpioDpins);
 80002fc:	f107 030c 	add.w	r3, r7, #12
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fa2b 	bl	800075c <GPIO_init>

	GpioCpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000306:	2300      	movs	r3, #0
 8000308:	713b      	strb	r3, [r7, #4]
	GPIO_init(&GpioCpins);
 800030a:	463b      	mov	r3, r7
 800030c:	4618      	mov	r0, r3
 800030e:	f000 fa25 	bl	800075c <GPIO_init>
	GpioCpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000312:	2301      	movs	r3, #1
 8000314:	713b      	strb	r3, [r7, #4]
	GPIO_init(&GpioCpins);
 8000316:	463b      	mov	r3, r7
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fa1f 	bl	800075c <GPIO_init>
	GpioCpins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 800031e:	2302      	movs	r3, #2
 8000320:	713b      	strb	r3, [r7, #4]
	GPIO_init(&GpioCpins);
 8000322:	463b      	mov	r3, r7
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fa19 	bl	800075c <GPIO_init>

	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_1, LOW); //RW set to Write
 800032a:	2200      	movs	r2, #0
 800032c:	2101      	movs	r1, #1
 800032e:	4804      	ldr	r0, [pc, #16]	; (8000340 <LCD_GPIO_Init+0xe8>)
 8000330:	f000 fbb8 	bl	8000aa4 <GPIO_WriteToOutputPin>


}
 8000334:	bf00      	nop
 8000336:	3718      	adds	r7, #24
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40020c00 	.word	0x40020c00
 8000340:	40020800 	.word	0x40020800

08000344 <LCD_command>:

void LCD_command(unsigned char input) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPort(GPIOD, input);
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	b29b      	uxth	r3, r3
 8000352:	4619      	mov	r1, r3
 8000354:	4812      	ldr	r0, [pc, #72]	; (80003a0 <LCD_command+0x5c>)
 8000356:	f000 fbca 	bl	8000aee <GPIO_WriteToOutputPort>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_0, LOW); //RS to 0
 800035a:	2200      	movs	r2, #0
 800035c:	2100      	movs	r1, #0
 800035e:	4811      	ldr	r0, [pc, #68]	; (80003a4 <LCD_command+0x60>)
 8000360:	f000 fba0 	bl	8000aa4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_1, LOW);
 8000364:	2200      	movs	r2, #0
 8000366:	2101      	movs	r1, #1
 8000368:	480e      	ldr	r0, [pc, #56]	; (80003a4 <LCD_command+0x60>)
 800036a:	f000 fb9b 	bl	8000aa4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_2, LOW);
 800036e:	2200      	movs	r2, #0
 8000370:	2102      	movs	r1, #2
 8000372:	480c      	ldr	r0, [pc, #48]	; (80003a4 <LCD_command+0x60>)
 8000374:	f000 fb96 	bl	8000aa4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_2, HIGH); //EN high
 8000378:	2201      	movs	r2, #1
 800037a:	2102      	movs	r1, #2
 800037c:	4809      	ldr	r0, [pc, #36]	; (80003a4 <LCD_command+0x60>)
 800037e:	f000 fb91 	bl	8000aa4 <GPIO_WriteToOutputPin>
	delayMs(10);
 8000382:	200a      	movs	r0, #10
 8000384:	f7ff ff4b 	bl	800021e <delayMs>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_2, LOW); //EN low
 8000388:	2200      	movs	r2, #0
 800038a:	2102      	movs	r1, #2
 800038c:	4805      	ldr	r0, [pc, #20]	; (80003a4 <LCD_command+0x60>)
 800038e:	f000 fb89 	bl	8000aa4 <GPIO_WriteToOutputPin>
	delayMs(20);
 8000392:	2014      	movs	r0, #20
 8000394:	f7ff ff43 	bl	800021e <delayMs>

}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40020800 	.word	0x40020800

080003a8 <LCD_Init>:

void LCD_Init(void) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
	unsigned char commands[] = {0x38,0x06,0x01,0x0F};
 80003ae:	4b16      	ldr	r3, [pc, #88]	; (8000408 <LCD_Init+0x60>)
 80003b0:	603b      	str	r3, [r7, #0]
	delayMs(45);
 80003b2:	202d      	movs	r0, #45	; 0x2d
 80003b4:	f7ff ff33 	bl	800021e <delayMs>
	LCD_command(0x30);
 80003b8:	2030      	movs	r0, #48	; 0x30
 80003ba:	f7ff ffc3 	bl	8000344 <LCD_command>
	delayMs(15);
 80003be:	200f      	movs	r0, #15
 80003c0:	f7ff ff2d 	bl	800021e <delayMs>
	LCD_command(0x30);
 80003c4:	2030      	movs	r0, #48	; 0x30
 80003c6:	f7ff ffbd 	bl	8000344 <LCD_command>
	delayMs(10);
 80003ca:	200a      	movs	r0, #10
 80003cc:	f7ff ff27 	bl	800021e <delayMs>
	LCD_command(0x30);
 80003d0:	2030      	movs	r0, #48	; 0x30
 80003d2:	f7ff ffb7 	bl	8000344 <LCD_command>
	delayMs(1);
 80003d6:	2001      	movs	r0, #1
 80003d8:	f7ff ff21 	bl	800021e <delayMs>

	for(uint8_t i = 0; i <= 3; i++){
 80003dc:	2300      	movs	r3, #0
 80003de:	71fb      	strb	r3, [r7, #7]
 80003e0:	e00a      	b.n	80003f8 <LCD_Init+0x50>
		LCD_command(commands[i]);
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	3308      	adds	r3, #8
 80003e6:	443b      	add	r3, r7
 80003e8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ffa9 	bl	8000344 <LCD_command>
	for(uint8_t i = 0; i <= 3; i++){
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	3301      	adds	r3, #1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	2b03      	cmp	r3, #3
 80003fc:	d9f1      	bls.n	80003e2 <LCD_Init+0x3a>
	}

}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	0f010638 	.word	0x0f010638

0800040c <LCD_data>:

void LCD_data(char data) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPort(GPIOD, data);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	b29b      	uxth	r3, r3
 800041a:	4619      	mov	r1, r3
 800041c:	4810      	ldr	r0, [pc, #64]	; (8000460 <LCD_data+0x54>)
 800041e:	f000 fb66 	bl	8000aee <GPIO_WriteToOutputPort>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_0, HIGH); //RS to 0
 8000422:	2201      	movs	r2, #1
 8000424:	2100      	movs	r1, #0
 8000426:	480f      	ldr	r0, [pc, #60]	; (8000464 <LCD_data+0x58>)
 8000428:	f000 fb3c 	bl	8000aa4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_1, LOW);
 800042c:	2200      	movs	r2, #0
 800042e:	2101      	movs	r1, #1
 8000430:	480c      	ldr	r0, [pc, #48]	; (8000464 <LCD_data+0x58>)
 8000432:	f000 fb37 	bl	8000aa4 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_2, HIGH); //EN high
 8000436:	2201      	movs	r2, #1
 8000438:	2102      	movs	r1, #2
 800043a:	480a      	ldr	r0, [pc, #40]	; (8000464 <LCD_data+0x58>)
 800043c:	f000 fb32 	bl	8000aa4 <GPIO_WriteToOutputPin>
	delayMs(10);
 8000440:	200a      	movs	r0, #10
 8000442:	f7ff feec 	bl	800021e <delayMs>
	GPIO_WriteToOutputPin(GPIOC, GPIO_PIN_2, LOW); //EN low
 8000446:	2200      	movs	r2, #0
 8000448:	2102      	movs	r1, #2
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <LCD_data+0x58>)
 800044c:	f000 fb2a 	bl	8000aa4 <GPIO_WriteToOutputPin>
	delayMs(10);
 8000450:	200a      	movs	r0, #10
 8000452:	f7ff fee4 	bl	800021e <delayMs>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40020c00 	.word	0x40020c00
 8000464:	40020800 	.word	0x40020800

08000468 <main>:

int main(void) {
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0
	LCD_GPIO_Init();
 800046e:	f7ff fef3 	bl	8000258 <LCD_GPIO_Init>
	LCD_Init();
 8000472:	f7ff ff99 	bl	80003a8 <LCD_Init>
	delayMs(10);
 8000476:	200a      	movs	r0, #10
 8000478:	f7ff fed1 	bl	800021e <delayMs>


	char msg[24] = "HELLO WORLD";
 800047c:	4a15      	ldr	r2, [pc, #84]	; (80004d4 <main+0x6c>)
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	ca07      	ldmia	r2, {r0, r1, r2}
 8000482:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000486:	f107 0310 	add.w	r3, r7, #16
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]

	while (1) {
		LCD_command(0x01); // clear screen
 8000492:	2001      	movs	r0, #1
 8000494:	f7ff ff56 	bl	8000344 <LCD_command>
		delayMs(30);
 8000498:	201e      	movs	r0, #30
 800049a:	f7ff fec0 	bl	800021e <delayMs>
		LCD_command(0x2); // return cursor home
 800049e:	2002      	movs	r0, #2
 80004a0:	f7ff ff50 	bl	8000344 <LCD_command>
		delayMs(100);
 80004a4:	2064      	movs	r0, #100	; 0x64
 80004a6:	f7ff feba 	bl	800021e <delayMs>
		for(uint8_t i = 0; i <= 10; i++){
 80004aa:	2300      	movs	r3, #0
 80004ac:	77fb      	strb	r3, [r7, #31]
 80004ae:	e00a      	b.n	80004c6 <main+0x5e>
		LCD_data(msg[i]);
 80004b0:	7ffb      	ldrb	r3, [r7, #31]
 80004b2:	3320      	adds	r3, #32
 80004b4:	443b      	add	r3, r7
 80004b6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f7ff ffa6 	bl	800040c <LCD_data>
		for(uint8_t i = 0; i <= 10; i++){
 80004c0:	7ffb      	ldrb	r3, [r7, #31]
 80004c2:	3301      	adds	r3, #1
 80004c4:	77fb      	strb	r3, [r7, #31]
 80004c6:	7ffb      	ldrb	r3, [r7, #31]
 80004c8:	2b0a      	cmp	r3, #10
 80004ca:	d9f1      	bls.n	80004b0 <main+0x48>
		}
		delay(60);// wait for about 1 sec
 80004cc:	203c      	movs	r0, #60	; 0x3c
 80004ce:	f7ff fe8b 	bl	80001e8 <delay>
		LCD_command(0x01); // clear screen
 80004d2:	e7de      	b.n	8000492 <main+0x2a>
 80004d4:	08000b6c 	.word	0x08000b6c

080004d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d8:	480d      	ldr	r0, [pc, #52]	; (8000510 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004da:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004dc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e0:	480c      	ldr	r0, [pc, #48]	; (8000514 <LoopForever+0x6>)
  ldr r1, =_edata
 80004e2:	490d      	ldr	r1, [pc, #52]	; (8000518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004e4:	4a0d      	ldr	r2, [pc, #52]	; (800051c <LoopForever+0xe>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f8:	4c0a      	ldr	r4, [pc, #40]	; (8000524 <LoopForever+0x16>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000506:	f000 fb01 	bl	8000b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800050a:	f7ff ffad 	bl	8000468 <main>

0800050e <LoopForever>:

LoopForever:
    b LoopForever
 800050e:	e7fe      	b.n	800050e <LoopForever>
  ldr   r0, =_estack
 8000510:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000518:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800051c:	08000b8c 	.word	0x08000b8c
  ldr r2, =_sbss
 8000520:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000524:	2000001c 	.word	0x2000001c

08000528 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000528:	e7fe      	b.n	8000528 <ADC_IRQHandler>
	...

0800052c <GPIO_PClkCtrl>:
#include "stm32f407xx_gpio_driver.h"

/*
 * Peripheral clock control
 */
void GPIO_PClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t State) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
	if (State == ENABLE) {
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d178      	bne.n	8000630 <GPIO_PClkCtrl+0x104>
		if (pGPIOx == GPIOA) {
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a7a      	ldr	r2, [pc, #488]	; (800072c <GPIO_PClkCtrl+0x200>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d106      	bne.n	8000554 <GPIO_PClkCtrl+0x28>
			GPIOA_PCLK_EN();
 8000546:	4b7a      	ldr	r3, [pc, #488]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a79      	ldr	r2, [pc, #484]	; (8000730 <GPIO_PClkCtrl+0x204>)
 800054c:	f043 0301 	orr.w	r3, r3, #1
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOJ_PCLK_DI();
		} else if (pGPIOx == GPIOK) {
			GPIOK_PCLK_DI();
		}
	}
}
 8000552:	e0e5      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOB) {
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a77      	ldr	r2, [pc, #476]	; (8000734 <GPIO_PClkCtrl+0x208>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d106      	bne.n	800056a <GPIO_PClkCtrl+0x3e>
			GPIOB_PCLK_EN();
 800055c:	4b74      	ldr	r3, [pc, #464]	; (8000730 <GPIO_PClkCtrl+0x204>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000560:	4a73      	ldr	r2, [pc, #460]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000562:	f043 0302 	orr.w	r3, r3, #2
 8000566:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000568:	e0da      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOC) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a72      	ldr	r2, [pc, #456]	; (8000738 <GPIO_PClkCtrl+0x20c>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d106      	bne.n	8000580 <GPIO_PClkCtrl+0x54>
			GPIOC_PCLK_EN();
 8000572:	4b6f      	ldr	r3, [pc, #444]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a6e      	ldr	r2, [pc, #440]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057e:	e0cf      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOD) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a6e      	ldr	r2, [pc, #440]	; (800073c <GPIO_PClkCtrl+0x210>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d106      	bne.n	8000596 <GPIO_PClkCtrl+0x6a>
			GPIOD_PCLK_EN();
 8000588:	4b69      	ldr	r3, [pc, #420]	; (8000730 <GPIO_PClkCtrl+0x204>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	4a68      	ldr	r2, [pc, #416]	; (8000730 <GPIO_PClkCtrl+0x204>)
 800058e:	f043 0308 	orr.w	r3, r3, #8
 8000592:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000594:	e0c4      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOE) {
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a69      	ldr	r2, [pc, #420]	; (8000740 <GPIO_PClkCtrl+0x214>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d106      	bne.n	80005ac <GPIO_PClkCtrl+0x80>
			GPIOE_PCLK_EN();
 800059e:	4b64      	ldr	r3, [pc, #400]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a63      	ldr	r2, [pc, #396]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80005a4:	f043 0310 	orr.w	r3, r3, #16
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005aa:	e0b9      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOF) {
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a65      	ldr	r2, [pc, #404]	; (8000744 <GPIO_PClkCtrl+0x218>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d106      	bne.n	80005c2 <GPIO_PClkCtrl+0x96>
			GPIOF_PCLK_EN();
 80005b4:	4b5e      	ldr	r3, [pc, #376]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	4a5d      	ldr	r2, [pc, #372]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80005ba:	f043 0320 	orr.w	r3, r3, #32
 80005be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c0:	e0ae      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOG) {
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a60      	ldr	r2, [pc, #384]	; (8000748 <GPIO_PClkCtrl+0x21c>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d106      	bne.n	80005d8 <GPIO_PClkCtrl+0xac>
			GPIOG_PCLK_EN();
 80005ca:	4b59      	ldr	r3, [pc, #356]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a58      	ldr	r2, [pc, #352]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80005d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d6:	e0a3      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOH) {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a5c      	ldr	r2, [pc, #368]	; (800074c <GPIO_PClkCtrl+0x220>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d106      	bne.n	80005ee <GPIO_PClkCtrl+0xc2>
			GPIOH_PCLK_EN();
 80005e0:	4b53      	ldr	r3, [pc, #332]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	4a52      	ldr	r2, [pc, #328]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80005e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ec:	e098      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOI) {
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a57      	ldr	r2, [pc, #348]	; (8000750 <GPIO_PClkCtrl+0x224>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d106      	bne.n	8000604 <GPIO_PClkCtrl+0xd8>
			GPIOI_PCLK_EN();
 80005f6:	4b4e      	ldr	r3, [pc, #312]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a4d      	ldr	r2, [pc, #308]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80005fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000602:	e08d      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOJ) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a53      	ldr	r2, [pc, #332]	; (8000754 <GPIO_PClkCtrl+0x228>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d106      	bne.n	800061a <GPIO_PClkCtrl+0xee>
			GPIOJ_PCLK_EN();
 800060c:	4b48      	ldr	r3, [pc, #288]	; (8000730 <GPIO_PClkCtrl+0x204>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a47      	ldr	r2, [pc, #284]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000618:	e082      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOK) {
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a4e      	ldr	r2, [pc, #312]	; (8000758 <GPIO_PClkCtrl+0x22c>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d17e      	bne.n	8000720 <GPIO_PClkCtrl+0x1f4>
			GPIOK_PCLK_EN();
 8000622:	4b43      	ldr	r3, [pc, #268]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a42      	ldr	r2, [pc, #264]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000628:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062e:	e077      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		if (pGPIOx == GPIOA) {
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a3e      	ldr	r2, [pc, #248]	; (800072c <GPIO_PClkCtrl+0x200>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d106      	bne.n	8000646 <GPIO_PClkCtrl+0x11a>
			GPIOA_PCLK_DI();
 8000638:	4b3d      	ldr	r3, [pc, #244]	; (8000730 <GPIO_PClkCtrl+0x204>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	4a3c      	ldr	r2, [pc, #240]	; (8000730 <GPIO_PClkCtrl+0x204>)
 800063e:	f023 0301 	bic.w	r3, r3, #1
 8000642:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000644:	e06c      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOB) {
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a3a      	ldr	r2, [pc, #232]	; (8000734 <GPIO_PClkCtrl+0x208>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d106      	bne.n	800065c <GPIO_PClkCtrl+0x130>
			GPIOB_PCLK_DI();
 800064e:	4b38      	ldr	r3, [pc, #224]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a37      	ldr	r2, [pc, #220]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000654:	f023 0302 	bic.w	r3, r3, #2
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
}
 800065a:	e061      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOC) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4a36      	ldr	r2, [pc, #216]	; (8000738 <GPIO_PClkCtrl+0x20c>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d106      	bne.n	8000672 <GPIO_PClkCtrl+0x146>
			GPIOC_PCLK_DI();
 8000664:	4b32      	ldr	r3, [pc, #200]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	4a31      	ldr	r2, [pc, #196]	; (8000730 <GPIO_PClkCtrl+0x204>)
 800066a:	f023 0304 	bic.w	r3, r3, #4
 800066e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000670:	e056      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOD) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a31      	ldr	r2, [pc, #196]	; (800073c <GPIO_PClkCtrl+0x210>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d106      	bne.n	8000688 <GPIO_PClkCtrl+0x15c>
			GPIOD_PCLK_DI();
 800067a:	4b2d      	ldr	r3, [pc, #180]	; (8000730 <GPIO_PClkCtrl+0x204>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a2c      	ldr	r2, [pc, #176]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000680:	f023 0308 	bic.w	r3, r3, #8
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000686:	e04b      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOE) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4a2d      	ldr	r2, [pc, #180]	; (8000740 <GPIO_PClkCtrl+0x214>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d106      	bne.n	800069e <GPIO_PClkCtrl+0x172>
			GPIOE_PCLK_DI();
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000694:	4a26      	ldr	r2, [pc, #152]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000696:	f023 0310 	bic.w	r3, r3, #16
 800069a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800069c:	e040      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOF) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a28      	ldr	r2, [pc, #160]	; (8000744 <GPIO_PClkCtrl+0x218>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d106      	bne.n	80006b4 <GPIO_PClkCtrl+0x188>
			GPIOF_PCLK_DI();
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a21      	ldr	r2, [pc, #132]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80006ac:	f023 0320 	bic.w	r3, r3, #32
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006b2:	e035      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOG) {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a24      	ldr	r2, [pc, #144]	; (8000748 <GPIO_PClkCtrl+0x21c>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d106      	bne.n	80006ca <GPIO_PClkCtrl+0x19e>
			GPIOG_PCLK_DI();
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80006c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006c8:	e02a      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOH) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4a1f      	ldr	r2, [pc, #124]	; (800074c <GPIO_PClkCtrl+0x220>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d106      	bne.n	80006e0 <GPIO_PClkCtrl+0x1b4>
			GPIOH_PCLK_DI();
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a16      	ldr	r2, [pc, #88]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80006d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006de:	e01f      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOI) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <GPIO_PClkCtrl+0x224>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d106      	bne.n	80006f6 <GPIO_PClkCtrl+0x1ca>
			GPIOI_PCLK_DI();
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ec:	4a10      	ldr	r2, [pc, #64]	; (8000730 <GPIO_PClkCtrl+0x204>)
 80006ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80006f4:	e014      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOJ) {
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4a16      	ldr	r2, [pc, #88]	; (8000754 <GPIO_PClkCtrl+0x228>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d106      	bne.n	800070c <GPIO_PClkCtrl+0x1e0>
			GPIOJ_PCLK_DI();
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
}
 800070a:	e009      	b.n	8000720 <GPIO_PClkCtrl+0x1f4>
		} else if (pGPIOx == GPIOK) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <GPIO_PClkCtrl+0x22c>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d105      	bne.n	8000720 <GPIO_PClkCtrl+0x1f4>
			GPIOK_PCLK_DI();
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <GPIO_PClkCtrl+0x204>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	4a05      	ldr	r2, [pc, #20]	; (8000730 <GPIO_PClkCtrl+0x204>)
 800071a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800071e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40020000 	.word	0x40020000
 8000730:	40023800 	.word	0x40023800
 8000734:	40020400 	.word	0x40020400
 8000738:	40020800 	.word	0x40020800
 800073c:	40020c00 	.word	0x40020c00
 8000740:	40021000 	.word	0x40021000
 8000744:	40021400 	.word	0x40021400
 8000748:	40021800 	.word	0x40021800
 800074c:	40021c00 	.word	0x40021c00
 8000750:	40022000 	.word	0x40022000
 8000754:	40022400 	.word	0x40022400
 8000758:	40022800 	.word	0x40022800

0800075c <GPIO_init>:

/*
 * initializing
 */
void GPIO_init(GPIO_Handle_t *pGPIOHandle) {
 800075c:	b480      	push	{r7}
 800075e:	b087      	sub	sp, #28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
	/****Configure the pin mode****/
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	795b      	ldrb	r3, [r3, #5]
 800076c:	2b03      	cmp	r3, #3
 800076e:	d820      	bhi.n	80007b2 <GPIO_init+0x56>
		//No interrupts are being initialized
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	795b      	ldrb	r3, [r3, #5]
 8000774:	461a      	mov	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //to populate the correct two bits in the mode register
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 8000780:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	681a      	ldr	r2, [r3, #0]
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	2103      	movs	r1, #3
 8000790:	fa01 f303 	lsl.w	r3, r1, r3
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 8000794:	43db      	mvns	r3, r3
 8000796:	4619      	mov	r1, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	400a      	ands	r2, r1
 800079e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6819      	ldr	r1, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	697a      	ldr	r2, [r7, #20]
 80007ac:	430a      	orrs	r2, r1
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	e0cb      	b.n	800094a <GPIO_init+0x1ee>
		//temp = 0;
	} else {
		//Interrupts are being initialized
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	795b      	ldrb	r3, [r3, #5]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d117      	bne.n	80007ea <GPIO_init+0x8e>
			//Falling edge trigger interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ba:	4b4b      	ldr	r3, [pc, #300]	; (80008e8 <GPIO_init+0x18c>)
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	7912      	ldrb	r2, [r2, #4]
 80007c2:	4611      	mov	r1, r2
 80007c4:	2201      	movs	r2, #1
 80007c6:	408a      	lsls	r2, r1
 80007c8:	4611      	mov	r1, r2
 80007ca:	4a47      	ldr	r2, [pc, #284]	; (80008e8 <GPIO_init+0x18c>)
 80007cc:	430b      	orrs	r3, r1
 80007ce:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d0:	4b45      	ldr	r3, [pc, #276]	; (80008e8 <GPIO_init+0x18c>)
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	7912      	ldrb	r2, [r2, #4]
 80007d8:	4611      	mov	r1, r2
 80007da:	2201      	movs	r2, #1
 80007dc:	408a      	lsls	r2, r1
 80007de:	43d2      	mvns	r2, r2
 80007e0:	4611      	mov	r1, r2
 80007e2:	4a41      	ldr	r2, [pc, #260]	; (80008e8 <GPIO_init+0x18c>)
 80007e4:	400b      	ands	r3, r1
 80007e6:	6093      	str	r3, [r2, #8]
 80007e8:	e035      	b.n	8000856 <GPIO_init+0xfa>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	795b      	ldrb	r3, [r3, #5]
 80007ee:	2b05      	cmp	r3, #5
 80007f0:	d117      	bne.n	8000822 <GPIO_init+0xc6>
			//Rising edge trigger
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007f2:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <GPIO_init+0x18c>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	7912      	ldrb	r2, [r2, #4]
 80007fa:	4611      	mov	r1, r2
 80007fc:	2201      	movs	r2, #1
 80007fe:	408a      	lsls	r2, r1
 8000800:	4611      	mov	r1, r2
 8000802:	4a39      	ldr	r2, [pc, #228]	; (80008e8 <GPIO_init+0x18c>)
 8000804:	430b      	orrs	r3, r1
 8000806:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000808:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <GPIO_init+0x18c>)
 800080a:	68db      	ldr	r3, [r3, #12]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	7912      	ldrb	r2, [r2, #4]
 8000810:	4611      	mov	r1, r2
 8000812:	2201      	movs	r2, #1
 8000814:	408a      	lsls	r2, r1
 8000816:	43d2      	mvns	r2, r2
 8000818:	4611      	mov	r1, r2
 800081a:	4a33      	ldr	r2, [pc, #204]	; (80008e8 <GPIO_init+0x18c>)
 800081c:	400b      	ands	r3, r1
 800081e:	60d3      	str	r3, [r2, #12]
 8000820:	e019      	b.n	8000856 <GPIO_init+0xfa>
		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT){
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	795b      	ldrb	r3, [r3, #5]
 8000826:	2b06      	cmp	r3, #6
 8000828:	d115      	bne.n	8000856 <GPIO_init+0xfa>
			//Both rising and falling edge trigger interrupt
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800082a:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <GPIO_init+0x18c>)
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	7912      	ldrb	r2, [r2, #4]
 8000832:	4611      	mov	r1, r2
 8000834:	2201      	movs	r2, #1
 8000836:	408a      	lsls	r2, r1
 8000838:	4611      	mov	r1, r2
 800083a:	4a2b      	ldr	r2, [pc, #172]	; (80008e8 <GPIO_init+0x18c>)
 800083c:	430b      	orrs	r3, r1
 800083e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <GPIO_init+0x18c>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	7912      	ldrb	r2, [r2, #4]
 8000848:	4611      	mov	r1, r2
 800084a:	2201      	movs	r2, #1
 800084c:	408a      	lsls	r2, r1
 800084e:	4611      	mov	r1, r2
 8000850:	4a25      	ldr	r2, [pc, #148]	; (80008e8 <GPIO_init+0x18c>)
 8000852:	430b      	orrs	r3, r1
 8000854:	6093      	str	r3, [r2, #8]
		}

		//Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	791b      	ldrb	r3, [r3, #4]
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	f003 0303 	and.w	r3, r3, #3
 8000866:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <GPIO_init+0x190>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d04e      	beq.n	8000910 <GPIO_init+0x1b4>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <GPIO_init+0x194>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d032      	beq.n	80008e2 <GPIO_init+0x186>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a1c      	ldr	r2, [pc, #112]	; (80008f4 <GPIO_init+0x198>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d02b      	beq.n	80008de <GPIO_init+0x182>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <GPIO_init+0x19c>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d024      	beq.n	80008da <GPIO_init+0x17e>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a19      	ldr	r2, [pc, #100]	; (80008fc <GPIO_init+0x1a0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d01d      	beq.n	80008d6 <GPIO_init+0x17a>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <GPIO_init+0x1a4>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d016      	beq.n	80008d2 <GPIO_init+0x176>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a16      	ldr	r2, [pc, #88]	; (8000904 <GPIO_init+0x1a8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d00f      	beq.n	80008ce <GPIO_init+0x172>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <GPIO_init+0x1ac>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d008      	beq.n	80008ca <GPIO_init+0x16e>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a13      	ldr	r2, [pc, #76]	; (800090c <GPIO_init+0x1b0>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <GPIO_init+0x16a>
 80008c2:	2308      	movs	r3, #8
 80008c4:	e025      	b.n	8000912 <GPIO_init+0x1b6>
 80008c6:	2300      	movs	r3, #0
 80008c8:	e023      	b.n	8000912 <GPIO_init+0x1b6>
 80008ca:	2307      	movs	r3, #7
 80008cc:	e021      	b.n	8000912 <GPIO_init+0x1b6>
 80008ce:	2306      	movs	r3, #6
 80008d0:	e01f      	b.n	8000912 <GPIO_init+0x1b6>
 80008d2:	2305      	movs	r3, #5
 80008d4:	e01d      	b.n	8000912 <GPIO_init+0x1b6>
 80008d6:	2304      	movs	r3, #4
 80008d8:	e01b      	b.n	8000912 <GPIO_init+0x1b6>
 80008da:	2303      	movs	r3, #3
 80008dc:	e019      	b.n	8000912 <GPIO_init+0x1b6>
 80008de:	2302      	movs	r3, #2
 80008e0:	e017      	b.n	8000912 <GPIO_init+0x1b6>
 80008e2:	2301      	movs	r3, #1
 80008e4:	e015      	b.n	8000912 <GPIO_init+0x1b6>
 80008e6:	bf00      	nop
 80008e8:	40013c00 	.word	0x40013c00
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020400 	.word	0x40020400
 80008f4:	40020800 	.word	0x40020800
 80008f8:	40020c00 	.word	0x40020c00
 80008fc:	40021000 	.word	0x40021000
 8000900:	40021400 	.word	0x40021400
 8000904:	40021800 	.word	0x40021800
 8000908:	40021c00 	.word	0x40021c00
 800090c:	40022000 	.word	0x40022000
 8000910:	2300      	movs	r3, #0
 8000912:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000914:	4b60      	ldr	r3, [pc, #384]	; (8000a98 <GPIO_init+0x33c>)
 8000916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000918:	4a5f      	ldr	r2, [pc, #380]	; (8000a98 <GPIO_init+0x33c>)
 800091a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000920:	7c7a      	ldrb	r2, [r7, #17]
 8000922:	7cbb      	ldrb	r3, [r7, #18]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	fa02 f103 	lsl.w	r1, r2, r3
 800092a:	4a5c      	ldr	r2, [pc, #368]	; (8000a9c <GPIO_init+0x340>)
 800092c:	7cfb      	ldrb	r3, [r7, #19]
 800092e:	3302      	adds	r3, #2
 8000930:	f842 1023 	str.w	r1, [r2, r3, lsl #2]



		//Enable the EXTI interrupt delivery using the IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000934:	4b5a      	ldr	r3, [pc, #360]	; (8000aa0 <GPIO_init+0x344>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	7912      	ldrb	r2, [r2, #4]
 800093c:	4611      	mov	r1, r2
 800093e:	2201      	movs	r2, #1
 8000940:	408a      	lsls	r2, r1
 8000942:	4611      	mov	r1, r2
 8000944:	4a56      	ldr	r2, [pc, #344]	; (8000aa0 <GPIO_init+0x344>)
 8000946:	430b      	orrs	r3, r1
 8000948:	6013      	str	r3, [r2, #0]



	}
	temp = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]

	/****Configure the pin speed****/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	799b      	ldrb	r3, [r3, #6]
 8000952:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //to populate the correct two bits in the mode register
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	791b      	ldrb	r3, [r3, #4]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 800095e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	689a      	ldr	r2, [r3, #8]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	791b      	ldrb	r3, [r3, #4]
 800096a:	005b      	lsls	r3, r3, #1
 800096c:	2103      	movs	r1, #3
 800096e:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 8000972:	43db      	mvns	r3, r3
 8000974:	4619      	mov	r1, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	400a      	ands	r2, r1
 800097c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6899      	ldr	r1, [r3, #8]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	430a      	orrs	r2, r1
 800098c:	609a      	str	r2, [r3, #8]
	temp = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]

	/****Configure pull up or pull dowm resistors****/
	temp = (pGPIOHandle->GPIO_PinConfig.PinPuPdControl
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	79db      	ldrb	r3, [r3, #7]
 8000996:	461a      	mov	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //to populate the correct two bits in the mode register
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	791b      	ldrb	r3, [r3, #4]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.PinPuPdControl
 80009a2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	68da      	ldr	r2, [r3, #12]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	791b      	ldrb	r3, [r3, #4]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	2103      	movs	r1, #3
 80009b2:	fa01 f303 	lsl.w	r3, r1, r3
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 80009b6:	43db      	mvns	r3, r3
 80009b8:	4619      	mov	r1, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	400a      	ands	r2, r1
 80009c0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	68d9      	ldr	r1, [r3, #12]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	430a      	orrs	r2, r1
 80009d0:	60da      	str	r2, [r3, #12]
	temp = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]

	/****Configure output type****/
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	7a1b      	ldrb	r3, [r3, #8]
 80009da:	461a      	mov	r2, r3
			<< (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //to populate the correct two bits in the mode register
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	791b      	ldrb	r3, [r3, #4]
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 80009e4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	685a      	ldr	r2, [r3, #4]
			<< (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	791b      	ldrb	r3, [r3, #4]
 80009f0:	4619      	mov	r1, r3
 80009f2:	2301      	movs	r3, #1
 80009f4:	408b      	lsls	r3, r1
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 80009f6:	43db      	mvns	r3, r3
 80009f8:	4619      	mov	r1, r3
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	400a      	ands	r2, r1
 8000a00:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6859      	ldr	r1, [r3, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	697a      	ldr	r2, [r7, #20]
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]

	/****Configure alternate function type****/
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALT) {
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	795b      	ldrb	r3, [r3, #5]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d135      	bne.n	8000a8a <GPIO_init+0x32e>
		//Alternate functions being initialized
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; //Determining which alternate function register to go with
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	791b      	ldrb	r3, [r3, #4]
 8000a22:	08db      	lsrs	r3, r3, #3
 8000a24:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8; //the relative bit position in the register
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	791b      	ldrb	r3, [r3, #4]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clear the 4 bits associated with the Pin Number
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	7c3b      	ldrb	r3, [r7, #16]
 8000a36:	3308      	adds	r3, #8
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	4413      	add	r3, r2
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	210f      	movs	r1, #15
 8000a44:	fa01 f303 	lsl.w	r3, r1, r3
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6819      	ldr	r1, [r3, #0]
 8000a50:	7c3b      	ldrb	r3, [r7, #16]
 8000a52:	4002      	ands	r2, r0
 8000a54:	3308      	adds	r3, #8
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	440b      	add	r3, r1
 8000a5a:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	7c3b      	ldrb	r3, [r7, #16]
 8000a62:	3308      	adds	r3, #8
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4413      	add	r3, r2
 8000a68:	685a      	ldr	r2, [r3, #4]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFuncMode << (4 * temp2));
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7a5b      	ldrb	r3, [r3, #9]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	7bfb      	ldrb	r3, [r7, #15]
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	fa01 f303 	lsl.w	r3, r1, r3
 8000a78:	4618      	mov	r0, r3
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6819      	ldr	r1, [r3, #0]
 8000a7e:	7c3b      	ldrb	r3, [r7, #16]
 8000a80:	4302      	orrs	r2, r0
 8000a82:	3308      	adds	r3, #8
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	440b      	add	r3, r1
 8000a88:	605a      	str	r2, [r3, #4]

	}
}
 8000a8a:	bf00      	nop
 8000a8c:	371c      	adds	r7, #28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40013800 	.word	0x40013800
 8000aa0:	40013c00 	.word	0x40013c00

08000aa4 <GPIO_WriteToOutputPin>:
	uint16_t value;
	value = (uint16_t) (pGPIOx->IDR);
	return value;
}
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber,
		uint8_t value) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	460b      	mov	r3, r1
 8000aae:	70fb      	strb	r3, [r7, #3]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	70bb      	strb	r3, [r7, #2]
	if (value == GPIO_PIN_SET) {
 8000ab4:	78bb      	ldrb	r3, [r7, #2]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d109      	bne.n	8000ace <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	78fa      	ldrb	r2, [r7, #3]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	615a      	str	r2, [r3, #20]
	} else {
		pGPIOx->ODR &= ~(1 << PinNumber);
	}
}
 8000acc:	e009      	b.n	8000ae2 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	78fa      	ldrb	r2, [r7, #3]
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ada:	43d2      	mvns	r2, r2
 8000adc:	401a      	ands	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	615a      	str	r2, [r3, #20]
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <GPIO_WriteToOutputPort>:

void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t value) {
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	460b      	mov	r3, r1
 8000af8:	807b      	strh	r3, [r7, #2]
	pGPIOx->ODR = value;
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	615a      	str	r2, [r3, #20]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <__libc_init_array>:
 8000b0c:	b570      	push	{r4, r5, r6, lr}
 8000b0e:	4d0d      	ldr	r5, [pc, #52]	; (8000b44 <__libc_init_array+0x38>)
 8000b10:	4c0d      	ldr	r4, [pc, #52]	; (8000b48 <__libc_init_array+0x3c>)
 8000b12:	1b64      	subs	r4, r4, r5
 8000b14:	10a4      	asrs	r4, r4, #2
 8000b16:	2600      	movs	r6, #0
 8000b18:	42a6      	cmp	r6, r4
 8000b1a:	d109      	bne.n	8000b30 <__libc_init_array+0x24>
 8000b1c:	4d0b      	ldr	r5, [pc, #44]	; (8000b4c <__libc_init_array+0x40>)
 8000b1e:	4c0c      	ldr	r4, [pc, #48]	; (8000b50 <__libc_init_array+0x44>)
 8000b20:	f000 f818 	bl	8000b54 <_init>
 8000b24:	1b64      	subs	r4, r4, r5
 8000b26:	10a4      	asrs	r4, r4, #2
 8000b28:	2600      	movs	r6, #0
 8000b2a:	42a6      	cmp	r6, r4
 8000b2c:	d105      	bne.n	8000b3a <__libc_init_array+0x2e>
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
 8000b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b34:	4798      	blx	r3
 8000b36:	3601      	adds	r6, #1
 8000b38:	e7ee      	b.n	8000b18 <__libc_init_array+0xc>
 8000b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b3e:	4798      	blx	r3
 8000b40:	3601      	adds	r6, #1
 8000b42:	e7f2      	b.n	8000b2a <__libc_init_array+0x1e>
 8000b44:	08000b84 	.word	0x08000b84
 8000b48:	08000b84 	.word	0x08000b84
 8000b4c:	08000b84 	.word	0x08000b84
 8000b50:	08000b88 	.word	0x08000b88

08000b54 <_init>:
 8000b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b56:	bf00      	nop
 8000b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b5a:	bc08      	pop	{r3}
 8000b5c:	469e      	mov	lr, r3
 8000b5e:	4770      	bx	lr

08000b60 <_fini>:
 8000b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b62:	bf00      	nop
 8000b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b66:	bc08      	pop	{r3}
 8000b68:	469e      	mov	lr, r3
 8000b6a:	4770      	bx	lr
